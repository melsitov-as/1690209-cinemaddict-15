// Movies-board - отвечает за все доску с фильмами
// Это класс
// В этом классе нужно позаботиться о нескольких методах и о конструкторе
// В методах класса должно быть то, чем управляет presenter
// Если что-то отрисовывается, что-то обрабатывается это в presenter'е
// То что в main.js - разложить по методам класса

export default class MoviesBoard {
  // Constructor используется для конфигурации презентера, а метод init вызывается когда этому презентеру нужно начать работать
  // То есть условно мы в конструкторе получаем некий контейнер, куда нужно отрисовывать board-Доску - это будем dom-элемент
  constructor() {
    this._siteFilmContainer = new SiteFilmsContainer();
    this._siteMenuFilter = new SiteMenuFilter();

  }


  // Не обязательная штука, это тот способ, который предлагают не значит, что так нужно делать можно обойтись только одним конструктором
  init(boardTasks) {
    this._boardTasks = boardTasks.slice();
    // Метод для инициализации (начала работы) модуля,
    // малая часть текущей функции renderBoard в main.js
  }

  _renderSort() {
    // Метод для рендеринга сортировки
  }

  _renderTask() {
    // Метод, куда уйдёт логика созданию и рендерингу компонетов задачи,
    // текущая функция renderTask в main.js
  }

  _renderTasks() {
    // Метод для рендеринга N-задач за раз
  }

  _renderNoTasks() {
    // Метод для рендеринга заглушки
  }

  _renderLoadMoreButton() {
    // Метод, куда уйдёт логика по отрисовке кнопки допоказа задач,
    // сейчас в main.js является частью renderBoard
  }

  _renderBoard() {
    // Метод для инициализации (начала работы) модуля,
    // бОльшая часть текущей функции renderBoard в main.js
  }
}

